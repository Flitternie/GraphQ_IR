#!/usr/bin/env python

# Command-line utility for plotting.
# Input: points, one per line from stdin.
# Each point can either be:
# - A single number
# - A (x,y) pair
# - A (x,y,label) triple
# - A (x,y1,y2,...) tuple (need -m)

# Example usage:
# Histogram: cat file | plot -t hist # file contains numbers, one per line.
# Time series: cat file | plot -l # file contains numbers, one per line.

import random
import argparse
import re
import sys

# Parse options
parser = argparse.ArgumentParser()
parser.add_argument('-t', '--type', dest='type', help='Type of plot to make (scatter or hist)', default='scatter')
parser.add_argument('-3', '--plot3d', dest='plot3d', help='Make a 3D plot', action='store_true')
parser.add_argument('-l', '--lines', dest='lines', action='store_true', help='Whether to draw lines connecting points')
parser.add_argument('--xlabel', dest='xlabel', help='x-axis label')
parser.add_argument('--ylabel', dest='ylabel', help='y-axis label')
parser.add_argument('--xmin', dest='xmin', help='minimum x value', type=float)
parser.add_argument('--xmax', dest='xmax', help='maximum x value', type=float)
parser.add_argument('--ymin', dest='ymin', help='minimum y value', type=float)
parser.add_argument('--ymax', dest='ymax', help='maximum y value', type=float)
parser.add_argument('--title', dest='title', help='Title of plot')
parser.add_argument('-d', '--delimiter', dest='delim', help='Delimiter to use to separate columns', default=r'\s+')
parser.add_argument('-m', '--multi', dest='multi', action='store_true', help='Whether each row of the input contains multiple lines')
parser.add_argument('--markerSize', dest='markerSize', help='Whether each row of the input contains multiple lines', default=5, type=int)
parser.add_argument('-a', '--alpha', dest='alpha', help='Alpha (transparency)', default=0.5, type=float)
parser.add_argument('-H', '--header', dest='header', action='store_true', help='Whether data has a header')
parser.add_argument('-o', '--output', dest='output', help='Output to a file rather than displaying')
options = parser.parse_args()

# Import plotting libraries
import matplotlib
if options.output: matplotlib.use('Agg')  # Use headless mode
from matplotlib import pylab  # This statement must follow the previous one
from mpl_toolkits.mplot3d import Axes3D

# Create the figure
fig = pylab.figure()
if options.plot3d:
  plt = fig.add_subplot(1, 1, 1, projection='3d')
else:
  plt = fig.add_subplot(1, 1, 1)

# Read in points
points = []
header = None
for line in sys.stdin:
  if line.startswith('#'): continue
  tokens = re.split(options.delim, line.rstrip())
  if options.header and not header:
    header = tokens
    continue
  points.append(tokens)

#print points

if options.multi:
  if options.type == 'hist':
    # x0 x1 x2 => convert into 3 different points (x0, col0), ..., (x2, col2)
    newPoints = []
    for p in points:
      for i, x in enumerate(p):
        newPoints.append([x, header[i] if header else 'col'+str(i)])
    points = newPoints
  else:
    # x y1 y2 y3 y4 => convert into 4 different points (x, y0, col1), ... (x, y4, col4)
    newPoints = []
    for p in points:
      for i, y in enumerate(p[1:]):
        newPoints.append([p[0], y, header[i+1] if header else 'col'+str(i+1)])
    points = newPoints

if header:
  plt.set_xlabel(header[0])
  if not options.multi and len(header) > 1: plt.set_ylabel(header[1])

# Set labels
if options.title: plt.set_title(options.title)
if options.xlabel: plt.set_xlabel(options.xlabel)
if options.ylabel: plt.set_ylabel(options.ylabel)

def output():
  if options.output:
    pylab.savefig(options.output)
  else:
    pylab.show()

if options.type == 'scatter':
  # Fix up missing coordinates
  for p, i in zip(points, range(len(points))):
    if len(p) == 1: # x -> (i, x, 0)
      p.append(p[0])
      p.append(0)
      p[0] = i
    elif len(p) == 2: # x y -> (x, y, 0)
      p.append(0)
    elif len(p) == 3: # x y z
      pass
    else:
      print 'Bad point: ' + str(p)

  # Input: x y z
  # If x (or y) is non-numeric, then we bin them and index them with integers.
  # z is the value at x and y
  xtickLabels = None
  try:
    points = [[float(x), y, label] for x, y, label in points]
  except:
    xtickLabels = ['']
    v2i = {}
    for p in points:
      x = p[0]
      if x in v2i:
        p[0] = v2i[x]
      else:
        p[0] = v2i[x] = len(xtickLabels)
        xtickLabels.append(x)

  ytickLabels = None
  try:
    points = [[x, float(y), z] for x, y, z in points]
  except:
    ytickLabels = ['']
    v2i = {}
    for p in points:
      y = p[1]
      if y in v2i:
        p[1] = v2i[y]
      else:
        p[1] = v2i[y] = len(ytickLabels)
        ytickLabels.append(y)

  zs = None
  try:
    # See if z is numeric
    points = [(x, y, float(z)) for x, y, z in points]
    minz = min(z for x, y, z in points)
    maxz = max(z for x, y, z in points)
  except:
    # Make it categorical
    zs = set()
    for x, y, z in points: zs.add(z)
    colors = ['red', 'blue', 'green', 'brown']
    while len(colors) < len(zs):  # Add random colors
      colors.append('#%02x%02x%02x' % (random.randint(0, 256), random.randint(0, 256), random.randint(0, 256)))
    z2color = {}
    for z, i in zip(zs, range(len(zs))):
      z2color[z] = colors[i]
    
  if xtickLabels:
    plt.set_xticks(range(0, len(xtickLabels)+1))
    plt.set_xticklabels(xtickLabels)
  if ytickLabels:
    plt.set_yticks(range(0, len(ytickLabels)))
    plt.set_yticklabels(ytickLabels)

  # Set the dynamic range
  def expandRange(l):
    a = min(l)
    b = max(l)
    f = (b-a)*0.01
    return [a - f, b + f]
  xs = [x for x, y, z in points]
  ys = [y for x, y, z in points]
  rng = expandRange(xs) + expandRange(ys)
  if options.xmin != None: rng[0] = options.xmin
  if options.xmax != None: rng[1] = options.xmax
  if options.ymin != None: rng[2] = options.ymin
  if options.ymax != None: rng[3] = options.ymax
  plt.axis(rng)

  plt.grid(True)
  if zs: # Are zs categorical
    for z0 in zs:
      xs = [x for x, y, z in points if z == z0]
      ys = [y for x, y, z in points if z == z0]
      plt.plot(xs, ys, '--o' if options.lines else 'o', color=z2color[z0], label=z0, markersize=options.markerSize, lw=0, alpha=options.alpha)
    plt.legend(loc=7)
  else:
    if all([z == 0 for x, y, z in points]): # Plot time series
      xs = [x for x, y, z in points]
      ys = [y for x, y, z in points]
      plt.plot(xs, ys, '--o' if options.lines else 'o', markersize=options.markerSize, lw=0, alpha=options.alpha)
    else:
      # 3D plot
      if options.plot3d:
        xs = [x for x, y, z in points]
        ys = [y for x, y, z in points]
        zs = [z for x, y, z in points]
        plt.scatter(xs, ys, zs)
      else:
        # Try to make a gradient plot - hacked together out of squares.
        markerSize = 480 / math.sqrt(len(points)) # Assume a square grid
        for x, y, z in points:
          value = (z - minz) / (maxz - minz + 1e-10)  # value in [0, 1]
          if value < 0.5: # blue to green
            value *= 2
            c = (0, value/2, (1-value))
          else:
            value = (value-0.5)*2
            c = (value, (1-value)/2, 0)
          plt.plot([x], [y], '--o' if options.lines else 's', color=c, markersize=markerSize, markeredgecolor=c)

  output()
elif options.type == 'hist':
  # Fix up missing coordinates
  for p, i in zip(points, range(len(points))):
    if len(p) == 1: # x -> (x, 0)
      p.append('0')
    elif len(p) == 2: # x z
      pass
    else:
      print 'Bad point: ' + str(p)

  # Input: x
  zs = set(z for x, z in points)
  for the_z in zs:
    xs = [float(x) for x, z in points if z == the_z]
    plt.hist(xs, 100, label=the_z, alpha=options.alpha)
  plt.legend()
  output()
else:
  raise Exception('Invalid type: ' + str(options.type))
